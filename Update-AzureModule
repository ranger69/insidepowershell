
Function Update-AzureModule {
<#
.SYNOPSIS
Updates your system to the latest Azure Module released on GitHub.
.DESCRIPTION
Compares current version installed, before installing the latest version.  
.NOTES
File Name: Update-AzureModule
Author   : Homer Cavazos
Requires : Elevated Priviledges
.INPUTS
Requires elevated PowerShell Session.
.OUTPUTS
Azure Version Available: 0.9.8
Azure Version Installed Now: 0.9.7
WARNING: Installing Latest Azure Version
Azure Version Installed Now: 0.9.7
-or-
Azure Version Available: 0.9.8
Azure Version Installed: Not Installed
.EXAMPLE
C:\PS> Update-AzureModule
Installs the Azure Module if the current version is out of date or not installed.
.EXAMPLE
C:\PS> Update-AzureModule -Force
Pulls the latest version of Azure and executes installation.
#>
[CmdletBinding()]Param
(
 [Parameter(Mandatory=$false)]
[Switch]$Force)

#Checking RunAs Administrator Enabled
Check-AdminRole 

#Checking for Latest Azure Module Release
Get-LatestAzureModule

#Calling function to verify Azure Module is installed
Check-InstalledAzureModule

#Comparing Installed Azure Module to Latest Release
Compare-AzureModuleVersions 

#Report and Install Versions
Install-LastestAzureModule

}

Function Check-AdminRole {
$CurrentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
if (($CurrentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)) -eq $false)
{
	$ArgumentList = "-noexit"
	Write-Host "elevating"
	Start-Process powershell.exe -Verb RunAs -ArgumentList ($ArgumentList -f ($myinvocation.MyCommand.Definition))
	Exit
}
}

Function Get-LatestAzureModule {
$Url = "https://github.com/Azure/azure-powershell/releases"
$AzureWeb = Invoke-WebRequest -Uri $Url -UserAgent Explorer    
$Script:Link = ($AzureWeb.AllElements  |where {$_.outertext -like "Windows Standalone"})[0].href
$Script:LatestAzureModule = ($Link.Split("/"))[8]
$LatestAzureModule = $LatestAzureModule | %{$_.Split('.')[1]+"."+$_.Split('.')[2]+"."+$_.Split('.')[3]}
"Azure Version Available: " + "$LatestAzureModule"
$Azureweb.Dispose()
}

Function Check-InstalledAzureModule {
$AMPath = 'C:\Program Files (x86)\Microsoft SDKs\Azure\PowerShell\ServiceManagement\Azure\Azure.psd1'
$Script:PathCheck = Test-Path $AMPath 

If ($PathCheck) {

[String]$AZVersion = GC $AMPath | select-string -pattern ModuleVersion
$Script:AMVersion = $($AZVersion.Split("'"))[1]

"Azure Version Installed Now: " + "$AMVersion"
} else {
#Execute Azure Module Download and Install
$Script:AMVersion = '0.0.0'
"Azure Version Installed: " + "Not Installed"
} 
}

Function Compare-AzureModuleVersions {
If ($Force) {
$Script:Results = $True
} else {$Script:Results = $LatestAzureModule.Contains($AMVersion)}
}

Function Install-LastestAzureModule {
If ($Results -eq $False){ 
$Arguments="/qn /i "+"$Link" 
Write-Warning -Message "Installing Latest Azure Version"
Start-Process 'C:\Windows\System32\MSIExec.exe' -ArgumentList $Arguments -Wait
Check-InstalledAzureModule
}else {"Latest Azure PowerShell Has Been Installed!!"}
}
